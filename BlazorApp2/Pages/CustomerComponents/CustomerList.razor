@page "/customers"
@inject HttpClient Http
@inject IModalService modal
@inject NavigationManager NavigationManager
<PageTitle>Customer List</PageTitle>

@using BlazorApp2.Data
@using BlazorApp2.Pages.Modal;
@using Models.EntityClass;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
<h1>Customer List</h1>

<button @onclick="@(()=>modal.Show<CommonCUModal>
("Add Customer", new ModalParameters()
    .Add(nameof(CommonCUModal.IsCreateCustomer), true)
    .Add(nameof(CommonCUModal.Action), "Add")))"
        class="btn btn-primary mb-2">
    Add Customer
</button>
@if (customers == null)
{
    <div class="spinner"></div>
}
else
{
    <SfGrid DataSource="@customers">
        <GridEvents CommandClicked="OnCommandClicked" TValue="Customer"></GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(Customer.Name)"></GridColumn>
            <GridColumn Field="@nameof(Customer.Phone)"></GridColumn>
            <GridColumn Field="@nameof(Customer.Address)"></GridColumn>
            <GridColumn Field="@nameof(Customer.Email)"></GridColumn>
            <GridColumn HeaderText="Action" TextAlign="TextAlign.Left">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "oi oi-pencil", Content = "Edit" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "oi oi-delete", Content = "Delete" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    private List<Customer>? customers;

    public async void OnCommandClicked(CommandClickEventArgs<Customer> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "Edit")
        {
            ShowModal(args.RowData.Id);
        }
        else if (args.CommandColumn.ButtonOption.Content == "Delete")
        {
            await DeleteCustomer(args.RowData.Id);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        customers = await Http.GetFromJsonAsync<List<Customer>>("customer-api/Customers/Get");
    }

    public void ShowModal(int id)
    {
        modal.Show<CommonCUModal>("Update Customer",
                new ModalParameters()
                .Add(nameof(CommonCUModal.IsCreateCustomer), true)
                .Add(nameof(CommonCUModal.Id), id));
    }

    protected async Task DeleteCustomer(int id)
    {
        var response = await Http.DeleteAsync("/customer-api/Customers/Delete?id=" + id);
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/customers", true);
    }
}
