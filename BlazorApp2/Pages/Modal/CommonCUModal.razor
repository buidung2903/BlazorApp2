@using BlazorApp2.Data
@using Models.EntityClass;
@inject WeatherForecastService ForecastService
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Action == "Add" || customer.Email != null && Action != "Add")
{
    <form>
        <div class="mt-md-2">
            <label class="col-md-2">Name</label>
            <input class="col-md-9" type="text" name="name" id="name" @bind-value="Name" />
            <input hidden type="text" name="id" id="id" @bind-value="Id" />
        </div>
        @if (IsCreateCustomer)
        {
            <div class="mt-md-2">
                <label class="col-md-2">Phone</label>
                <input class="col-md-9" type="text" name="phone" id="phone" @bind-value="customer.Phone" />
            </div>
            <div class="mt-md-2">
                <label class="col-md-2">Address</label>
                <input class="col-md-9" type="text" name="address" id="address" @bind-value="customer.Address" />
            </div>
            <div class="mt-md-2">
                <label class="col-md-2">Email</label>
                <input class="col-md-9" type="text" name="email" id="email" @bind-value="customer.Email" />
            </div>

        }
        else
        {
            <div class="mt-md-2">
                <label class="col-md-2">SKU</label>
                <input class="col-md-9" type="text" name="sku" id="sku" @bind-value="product.Sku" />
            </div>
        }
        @if (Id == null)
        {
            <div class="mt-md-2 tl-center">
                <button class="btn btn-primary" type="button" @onclick="IsCreateCustomer ? CreateCustomer : CreateProduct">@(IsCreateCustomer ? "Add Customer" : "Add Product")</button>
            </div>
        }
        else
        {
            <div class="mt-md-2 tl-center">
                <button class="btn btn-primary" type="button" @onclick="IsCreateCustomer ? UpdateCustomer : UpdateProduct">@(IsCreateCustomer ? "Update Customer" : "Update Product")</button>
            </div>
        }
    </form>
}

@code {
    [Parameter] public bool IsCreateCustomer { get; set; }

    [Parameter] public string Action { get; set; }

    public string Name{ get; set; }

    [Parameter] public int? Id { get; set; }

    Customer customer = new Customer();

    Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        if (Action != "Add")
        {
            if (IsCreateCustomer)
            {
                customer = await Http.GetFromJsonAsync<Customer>("/customer-api/Customers/Get/" + Id);
                Name = customer.Name;
            }
            else
            {
                product = await Http.GetFromJsonAsync<Product>("/product-api/Products/Get/" + Id);
                Name = product.Name;
            }
        }
    }

    protected async Task CreateCustomer()
    {
        customer.Name = Name;
        var response = await Http.PostAsJsonAsync("/customer-api/Customers/Post", customer);
        Cancel();
    }

    protected async Task UpdateCustomer()
    {
        customer.Name = Name;
        customer.Id = Id ?? default;
        var response = await Http.PutAsJsonAsync("/customer-api/Customers/Put", customer);
        Cancel();
    }

    protected async Task UpdateProduct()
    {
        product.Name = Name;
        product.Id = Id ?? default;
        var response = await Http.PutAsJsonAsync("/product-api/Products/Put", product);
        Cancel();
    }

    protected async Task CreateProduct()
    {
        product.Name = Name;
        var response = await Http.PostAsJsonAsync("/product-api/Products/Post", product);
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo(IsCreateCustomer ? "/customers" : "/products", true);
    }
}
