@page "/products"
@inject HttpClient Http
@inject IModalService modal
@inject NavigationManager NavigationManager
<PageTitle>Product List</PageTitle>

@using BlazorApp2.Data
@using BlazorApp2.Pages.Modal;
@using Models.EntityClass;

<h1>Product List</h1>

<button @onclick="@(()=>modal.Show<CommonCUModal>
("Add Product", new ModalParameters().Add(nameof(CommonCUModal.IsCreateCustomer), false)))"
        class="btn btn-primary">
    Add Product
</button>
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Sku</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Sku</td>
                    <td>
                        <div @onclick="@(()=> modal.Show<CommonCUModal>("Update Product",
                            new ModalParameters()
                            .Add(nameof(CommonCUModal.IsCreateCustomer), false)
                            .Add(nameof(CommonCUModal.Id), product.Id)))"
                             class="oi oi-pencil"></div>
                        <div @onclick="@(() => DeleteProduct(product.Id))" class="oi oi-delete"></div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<List<Product>>("product-api/Products/Get");
    }

    protected async Task DeleteProduct(int id)
    {
        var response = await Http.DeleteAsync("/product-api/Products/Delete?id=" + id);
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/products", true);
    }
}
